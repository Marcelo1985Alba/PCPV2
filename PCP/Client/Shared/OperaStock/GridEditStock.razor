@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;
@inject HttpClient Http
@using System.Text.Json

@if (DataSource == null)
{
    return;
}
else
{
    <div class="table-responsive">

        <table id="x1" class="dxbs-table table table-bordered table-sm myFormat myFormatHeader">
            <tbody>
                @*Preparar grilla para cargar sus columnas dinamicamente*@
                <DxDataGrid @ref="@grid" SelectionMode="DataGridSelectionMode.SingleSelectedDataRow"
                            Data="@DataSource" T="Stock"
                            ShowFilterRow="false"
                            ShowPager="false"
                            RowRemoving="@((dataItem) => OnRowRemoving(dataItem))"
                            RowEditStart="@(async (dataItem) => await OnRowEditStarting(dataItem))"
                            RowInsertStart="@(async () => await OnRowEditStarting(null))">
                    <Columns>
                        <DxDataGridCommandColumn DeleteButtonVisible="PermiteEliminar"
                                                 EditButtonVisible="PermiteEditar"
                                                 NewButtonVisible="PermiteAgregar"
                                                 Width="90px">
                        </DxDataGridCommandColumn>
                        <DxDataGridColumn Field="@nameof(Stock.CG_ART)" Caption="Cod. Producto"
                                          SortOrder="@DataGridColumnSortOrder.Ascending"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.DES_ART)" Caption="Desc. Producto"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.STOCK)" Caption="Cantidad"></DxDataGridColumn>
                        <DxDataGridComboBoxColumn Data="@Unidades" Field="@nameof(Stock.UNID)"
                                                  Caption="Unidad">
                        </DxDataGridComboBoxColumn>
                        <DxDataGridColumn Field="@nameof(Stock.STOCKA)" Caption="Stock A"></DxDataGridColumn>
                        <DxDataGridComboBoxColumn Data="@Unidades" Field="@nameof(Stock.UNIDA)"
                                                  Caption="Unidad A">
                        </DxDataGridComboBoxColumn>
                        <DxDataGridColumn Field="@nameof(Stock.IMPORTE1)" Caption="Precio Unit."></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.IMPORTE2)" Caption="Importe2"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.IMPORTE3)" Caption="Importe3"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.IMPORTE4)" Caption="Importe4"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.DESPACHO)" Caption="Despacho"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.SERIE)" Caption="Serie"></DxDataGridColumn>
                        <DxDataGridColumn Field="@nameof(Stock.LOTE)" Caption="Lote"></DxDataGridColumn>
                    </Columns>

                    <EditFormTemplate>
                        <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />

                            <DxFormLayout>
                                <DxFormLayoutItem Caption="" ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        @foreach (var tipo in this.TiposInsumo)
                                        {
                                            <label class="form-check-label mr-2">
                                                <input type="radio"
                                                       name="tipo"
                                                       checked="@(TipoInsumoCodigo == tipo.Codigo)"
                                                       @onchange="@(() => TipoInsumoCodigo = tipo.Codigo)" />
                                                @tipo.Descrip
                                            </label>
                                        }
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Codigo Producto:" ColSpanMd="4" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.CodigoProducto" ReadOnly="true" />
                                        @*<ValidationMessage For="@(()=> EditContext.CodigoProducto)" />*@
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Description Producto:" ColSpanMd="7" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.DescripcionProducto" ReadOnly="true" />
                                        @*<ValidationMessage For="@(()=> EditContext.DescripcionProducto)" />*@
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="" ColSpanMd="1" Context="FormLayoutContext">
                                    <Template>
                                        <DxButton RenderStyle="@ButtonRenderStyle.Primary" 
                                                  Enabled="@HabilitaBotonBuscar"
                                                  IconCssClass="fas fa-search"
                                                  Click="@(async (e)=> await Buscar())"
                                                  />
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Cantidad" ColSpanMd="3" Context="FormLayoutContext">
                                    <Template>
                                        <DxSpinEdit @bind-Value="@EditContext.Cantidad"
                                                    MaxValue="9999999m" Increment="0.0001m"
                                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                                        @*<ValidationMessage For="@(()=> EditContext.Cantidad)" />*@
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Unidad" ColSpanMd="3" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.Unidad" ReadOnly="true"></DxTextBox>
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Despacho" ColSpanMd="3" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.Despacho" 
                                                   ReadOnly="@ControlReadOnly()" />
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Serie" ColSpanMd="3" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.Serie" 
                                                   ReadOnly="@ControlReadOnly()" />
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem Caption="Lote" ColSpanMd="3" Context="FormLayoutContext">
                                    <Template>
                                        <DxTextBox @bind-Text="@EditContext.Lote" 
                                                   ReadOnly="@ControlReadOnly()"/>
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <ValidationSummary />
                                    </Template>
                                </DxFormLayoutItem>
                                <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                                    <Template>
                                        <div class="dxbs-fl-ctrl dxbs-fl-ctrl-nc text-right">
                                            <button class="btn btn-success btn-sm" type="submit">
                                                <i class="fas fa-save"></i> Guardar
                                            </button>
                                            <button class="btn btn-sm btn-danger" type="button"
                                                    @onclick="@OnCancelButtonClick">
                                                <i class="fas fa-backspace"></i>  Cancelar
                                            </button>
                                        </div>
                                    </Template>
                                </DxFormLayoutItem>
                            </DxFormLayout>
                        </EditForm>
                    </EditFormTemplate>
                </DxDataGrid>
            </tbody>
        </table>
    </div>
    <BuscadorEmergente Titulo=@tituloBuscador Visible="@PopupBuscadorVisible" DataSource="@Items"
                       Columnas="@ColumnasBuscador" onObjetoSeleccionado="onObjectSelected" />

}

@code {

    [Parameter] public string Titulo { get; set; } = null!;
    [Parameter] public Stock[] DataSource { get; set; } = null!;
    [Parameter] public bool PermiteAgregar { get; set; } = false;
    [Parameter] public bool PermiteEditar { get; set; } = false;
    [Parameter] public bool PermiteEliminar { get; set; } = false;
    [Parameter] public EventCallback<Stock> onEnviarDepos { get; set; }

    [Parameter] public EventCallback<Stock> onGuardar { get; set; }
    [CascadingParameter] public Stock RegistroGenerado { get; set; }

    DxDataGrid<Stock> grid;
    Unidad[] Unidades = new List<Unidad>().ToArray();
    private Unidad selectedUnidad = null;
    Unidad SelectedUnidad
    {
        get => selectedUnidad;
        set { selectedUnidad = value; InvokeAsync(StateHasChanged); }
    }


    bool HabilitaBotonBuscar = true;

    class TipoInsumo
    {
        public int Codigo { get; set; }
        public string Descrip { get; set; }
    }

    int TipoInsumoCodigo = 1;
    TipoInsumo[] TiposInsumo = new[] {
      new TipoInsumo { Codigo = 1, Descrip = "Productos" },
      new TipoInsumo { Codigo = 2, Descrip = "Semi Elaborados" },
      new TipoInsumo { Codigo = 4, Descrip = "Materias Primas" },
      new TipoInsumo { Codigo = 10, Descrip = "Articulo de Reventa" },
      new TipoInsumo { Codigo = 11, Descrip = "Herramental/Inventariables" },
      new TipoInsumo { Codigo = 12, Descrip = "Repuestos" },
      new TipoInsumo { Codigo = 13, Descrip = "Servicios" }
    };


    public class ControlCantAttribute : ValidationAttribute
    {

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var stock = (FormEditContext)validationContext.ObjectInstance;

            if (stock.Tipoo == 21)
                return ValidationResult.Success;


            decimal? cant = (decimal?)value;
            return ((stock.Tipoo == 6 || stock.Tipoo == 9) && stock.Cantidad > stock.ResumenStock?.STOCK)
                ? new ValidationResult($"La cantidad ingresada no puede ser mayor a la del stock ({stock.ResumenStock?.STOCK})")
                : ValidationResult.Success;

            //return cant == default || cant == 0
            //? new ValidationResult("Ingresar cantidad")
            //: ValidationResult.Success;
        }
    }




    public class RequireWhenExigeDespachoAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var stock = (FormEditContext)validationContext.ObjectInstance;
            if (stock.ExigeDespacho == 0)
                return ValidationResult.Success;

            var despacho = value as string;
            return string.IsNullOrWhiteSpace(despacho)
                ? new ValidationResult("Ingresar Despacho: el insumo exige despacho")
                : ValidationResult.Success;
        }
    }

    public class RequireWhenExigeSerieAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var stock = (FormEditContext)validationContext.ObjectInstance;
            if (stock.ExigeSerie == 0)
                return ValidationResult.Success;

            var serie = value as string;
            return string.IsNullOrWhiteSpace(serie)
                ? new ValidationResult("Ingresar Serie: el insumo exige serie")
                : ValidationResult.Success;
        }
    }
    public class RequireWhenExigeLoteAttribute : ValidationAttribute
    {
        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var stock = (FormEditContext)validationContext.ObjectInstance;
            if (stock.ExigeLote == 0)
                return ValidationResult.Success;

            var lote = value as string;
            return string.IsNullOrWhiteSpace(lote)
                ? new ValidationResult("Ingresar Lote: el insumo exige lote")
                : ValidationResult.Success;
        }
    }

    class FormEditContext
    {
        public FormEditContext(Stock dataItem)
        {
            DataItem = dataItem;
            if (DataItem == null)
            {
                DataItem = new Stock();
                DataItem.STOCK = 0.000M;
                DataItem.DESPACHO = "";
                DataItem.SERIE = "";
                DataItem.LOTE = "";

                IsNewRow = true;
            }

            CodigoProducto = DataItem.CG_ART;
            DescripcionProducto = DataItem.DES_ART;
            Unidad = DataItem.UNID;
            Cantidad = DataItem.STOCK;
            Despacho = DataItem.DESPACHO;
            Serie = DataItem.SERIE;
            Lote = DataItem.LOTE;
            Importe1 = DataItem.IMPORTE1;
            Tipoo = DataItem.TIPOO;
            ExigeDespacho = DataItem.EXIGEDESPACHO;
            ExigeSerie = DataItem.EXIGESERIE;
            ExigeLote = DataItem.EXIGELOTE;
            ResumenStock = DataItem.ResumenStock;
        }

        public Stock DataItem { get; set; }
        public bool IsNewRow { get; set; }

        [Required(ErrorMessage = "Ingresar Codigo de Producto.")]
        [StringLength(maximumLength: 15, MinimumLength = 1,
        ErrorMessage = "Ingresar Codigo de Producto.")]
        public string CodigoProducto { get; set; }

        [Required(ErrorMessage = "Ingresar Descripcion")]
        [StringLength(maximumLength: 500, MinimumLength = 4,
        ErrorMessage = "Ingresar Descripcion")]
        public string DescripcionProducto { get; set; }

        public int? Tipoo { get; set; } = 0;

        [Required(ErrorMessage = "Ingresar Cantidad")]
        //[Range(minimum: 1.0000, maximum: 9999999.0000, ErrorMessage = "Ingresar Cantidad")]
        [Column(TypeName = "decimal(18,4)")]
        [ControlCant]
        public decimal? Cantidad { get; set; }

        public string Unidad { get; set; } = "";
        public decimal StockA { get; set; } = 0;
        public string UnidadA { get; set; } = "";
        public decimal? Importe1 { get; set; } = 0;
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public decimal Importe2 { get; set; } = 0;
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public decimal Importe3 { get; set; } = 0;
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public decimal Importe4 { get; set; } = 0;
        public string Moneda { get; set; } = "";

        [RequireWhenExigeDespacho]
        public string Despacho { get; set; } = "";
        [RequireWhenExigeSerie]
        public string Serie { get; set; } = "";
        [RequireWhenExigeLote]
        public string Lote { get; set; } = "";

        public ResumenStock ResumenStock { get; set; } = new ResumenStock();

        public int? ExigeDespacho { get; set; } = 0;
        public int? ExigeSerie { get; set; } = 0;
        public int? ExigeLote { get; set; } = 0;
        public bool ExigeOA { get; set; }
        public int Cg_Orden { get; set; }


        public Action StateHasChanged { get; set; }
    }


    FormEditContext EditContext = null;

    async Task OnRowEditStarting(Stock pedido)
    {
        EditContext = new FormEditContext(pedido);
        EditContext.Tipoo = RegistroGenerado.TIPOO;

        EditContext.Cantidad = 0;

        //ir al servidor y cargar el stock del item
        if (EditContext.Tipoo == 6 || EditContext.Tipoo == 9) //DEV
        {
            if (pedido == null) return;

            if (!string.IsNullOrEmpty(pedido.CG_ART))
            {
                var cg_art = pedido.CG_ART;
                var cg_dep = pedido.CG_DEP;
                var despacho = pedido.DESPACHO == null ? "" : pedido.DESPACHO;
                var lote = pedido.LOTE == null ? "" : pedido.LOTE;
                var serie = pedido.SERIE == null ? "" : pedido.SERIE;

                var resumen = await Http
                    .GetFromJsonAsync<ResumenStock>($"api/ResumenStocks/GetByStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");
                EditContext.ResumenStock = resumen;

            }

        }

        EditContext.StateHasChanged += () => { InvokeAsync(StateHasChanged); };
    }
    void OnCancelButtonClick()
    {
        EditContext = null;
        grid.CancelRowEdit();
    }
    async Task HandleValidSubmit()
    {
        EditContext.DataItem.CG_ART = EditContext.CodigoProducto;
        EditContext.DataItem.DES_ART = EditContext.DescripcionProducto;
        EditContext.DataItem.UNID = EditContext.Unidad;
        EditContext.DataItem.STOCK =  EditContext.Cantidad;

        EditContext.DataItem.DESPACHO = EditContext.Despacho;
        EditContext.DataItem.SERIE = EditContext.Serie;
        EditContext.DataItem.LOTE = EditContext.Lote;
        EditContext.DataItem.IMPORTE1 = EditContext.Importe1;
        EditContext.DataItem.EXIGEDESPACHO = EditContext.ExigeDespacho;
        EditContext.DataItem.CG_ORDEN = EditContext.Cg_Orden;



        try
        {
            //envio item stock para guardar en la pantall operarcion
            //para poder agregarle los datos de la cabecera: vale, ocompra etc
            await onGuardar.InvokeAsync(EditContext.DataItem);

            //agregar nuero de registro una vez guardado
            EditContext.DataItem.REGISTRO = RegistroGenerado.REGISTRO;
            EditContext.DataItem.IMPORTE1 = RegistroGenerado.IMPORTE1;
            EditContext.DataItem.IMPORTE2 = RegistroGenerado.IMPORTE2;
            EditContext.DataItem.IMPORTE3 = RegistroGenerado.IMPORTE3;
            EditContext.DataItem.IMPORTE4 = RegistroGenerado.IMPORTE4;
            EditContext.DataItem.IMPORTE6 = RegistroGenerado.IMPORTE6;

            if (EditContext.IsNewRow)
            {
                EditContext.IsNewRow = false;
                var nuevoItem = (new Stock[] { EditContext.DataItem });
                //lStock = (new Stock[] { EditContext.DataItem }).Concat(lStock);
                DataSource = nuevoItem.Concat(DataSource).ToArray();
            }


            await grid.Refresh();
            EditContext = null;
            await grid.CancelRowEdit();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }

    }

    void OnRowRemoving(Stock pedido)
    {
        DataSource = DataSource.Where(v => v != pedido).ToArray();
        InvokeAsync(StateHasChanged);
    }

    string tituloBuscador { get; set; } = "";
    private bool popupBuscadorVisible = false;
    bool PopupBuscadorVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    string[] ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD" }; /*,"DES_ART","DESPACHO", "LOTE","SERIE"*/
    object[] Items;

    protected async Task Buscar()
    {
        if (RegistroGenerado.TIPOO == 5) //Recep
        {
            await BuscarProductos();
        }

        if (RegistroGenerado.TIPOO == 21) //Ajuste
        {
            await BuscarProductosStock();
        }

        if(RegistroGenerado.TIPOO == 9 || RegistroGenerado.TIPOO == 6) //Devol y Movim
        {

            await BuscarProductosStockEnPositivo();
        }


    }

    protected bool ControlReadOnly()
    {
        if (RegistroGenerado.TIPOO == 6 || RegistroGenerado.TIPOO == 9 || RegistroGenerado.TIPOO == 21)
        {
            return true;
        }


        return false;
    }

    protected async Task BuscarProductos()
    {
        Items = null;
        tituloBuscador = "Listado de Productos";
        PopupBuscadorVisible = true;
        ColumnasBuscador = new string[] { "CG_PROD", "DES_PROD", "UNID" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<Producto[]>($"api/Productos/GetProductos/{cg_orden}");


        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStock()
    {
        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP","DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks");

        await InvokeAsync(StateHasChanged);
    }

    protected async Task BuscarProductosStockEnPositivo()
    {
        Items = null;
        tituloBuscador = "Listado de Productos en Stock";
        PopupBuscadorVisible = true;
        ColumnasBuscador = new string[] { "CG_ART", "CG_DEP", "DESPACHO", "SERIE", "LOTE", "STOCK" };
        int cg_orden = TipoInsumoCodigo;
        Items = await Http.GetFromJsonAsync<ResumenStock[]>("api/ResumenStocks/GetResumenStockPositivo");

        await InvokeAsync(StateHasChanged);
    }

    private async Task onObjectSelected(object obj)
    {
        PopupBuscadorVisible = false;
        var tipoEntidad = obj.GetType().Name;
        if (tipoEntidad == "Stock")
        {
            var pedido = (Stock)obj;
            //Get items del vale
            var vale = pedido.VALE;
            DataSource = await Http.GetFromJsonAsync<Stock[]>($"api/Stock/AbriVale/{pedido.VALE}");

            //NumeroVale = ItemsVale[0].VALE;
            //Fecha = ItemsVale[0].FE_MOV;
        }

        if (tipoEntidad == "Producto")
        {
            var producto = (Producto)obj;
            EditContext.CodigoProducto = producto.CG_PROD;
            EditContext.DescripcionProducto = producto.DES_PROD;
            EditContext.Unidad = producto.UNID;
        }

        if (tipoEntidad == "ResumenStock")
        {
            var resumenStock = (ResumenStock)obj;

            //buscar registro mas reciente con las caracteristicas de resumen stock
            var cg_art = resumenStock.CG_ART;
            var cg_dep = resumenStock.CG_DEP;
            var despacho = resumenStock.DESPACHO == null ? "" : resumenStock.DESPACHO;
            var lote = resumenStock.LOTE == null ? "" : resumenStock.LOTE;
            var serie = resumenStock.SERIE == null ? "" : resumenStock.SERIE;

            var registroCompleto = await Http
                .GetFromJsonAsync<Stock>($"api/Stock/GetByResumenStock?CG_ART={cg_art}&CG_DEP={cg_dep}&DESPACHO={despacho}&LOTE={lote}&SERIE={serie}");

            registroCompleto.REGISTRO = -1;//indica que es un nuevo registro
            registroCompleto.TIPOO = RegistroGenerado.TIPOO;
            registroCompleto.STOCK = 0;


            //var nuevoItem = (new Stock[] { EditContext.DataItem });
            //lStock = (new Stock[] { EditContext.DataItem }).Concat(lStock);
            //DataSource = nuevoItem.Concat(DataSource).ToArray();

            EditContext = new FormEditContext(registroCompleto);
            EditContext.IsNewRow = true;

            EditContext.ResumenStock = resumenStock;

        }
    }
}
