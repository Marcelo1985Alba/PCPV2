@page "/stockoperaciones"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject ToastService toastService
@using System.Text.Json
<head>
    ...
    <link href="_content/DevExpress.Blazor/dx-blazor.css" rel="stylesheet" />
</head>
<div class="form-inline">
    <h4 class="mt-5 text-left">
        Operaciones de Stock a Realizar
        <small class="text-info"> <strong>@SelectedTire?.Descrip</strong></small>
    </h4>
    <DxToolbar AdaptivityAutoCollapseItemsToIcons="true" CssClass="mt-4"
               ItemRenderStyleMode="ToolbarRenderStyleMode.Plain">
        <Items>
            <DxToolbarItem RenderStyle="ButtonRenderStyle.Info" Text="Info"
                           Alignment="ToolbarItemAlignment.Right"
                           @onclick="@(() => toastService.ShowToast("Test Mensaje", TipoAlerta.Info))" />
            <DxToolbarItem IconCssClass="fas fa-print"
                           RenderStyle="ButtonRenderStyle.Success"
                           Alignment="ToolbarItemAlignment.Right" Text="Imprimir" />
            <DxToolbarItem BeginGroup="true" IconCssClass="fas fa-minus-circle"
                           RenderStyle="ButtonRenderStyle.Danger" Text="Eliminar"
                           Alignment="ToolbarItemAlignment.Right" />
            <DxToolbarItem IconCssClass="fas fa-plus" Text="Nuevo"
                           Alignment="ToolbarItemAlignment.Right" />
            <DxToolbarItem IconCssClass="tb-icon tb-icon-alert"
                           RenderStyle="ButtonRenderStyle.Warning" Text="Warning"
                           Alignment="ToolbarItemAlignment.Right" />
        </Items>
    </DxToolbar>

</div>
<hr />

<DxFormLayout>
    @*SELECCION DE TIPO DE OPERAC*@
    <DxFormLayoutItem Caption="Operaciones de Stock:" ColSpanXl="6" ColSpanMd="4" ColSpanXs="12">
        <Template>
            <ComboTipoo TipooSeleccionado="@SelectedTire" OnSelectedTireChanged="@SelectedTireChanged" />
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Orden de Fabrición:" ColSpanXl="3" ColSpanMd="4" ColSpanXs="6">
        <Template>
            <BuscadorOFab EsSoloLectura="OFSoloLectura" HabilitaBotonBusqueda="HabilitaBotonOF"
                          MostraBotonBusqueda="false" MostrarSpin="false"
                          Valor="@OrdenFabricacion" OnOFSeleccionada="onObjectSelected" />

        </Template>
    </DxFormLayoutItem>
    @*BUSCAR OF*@

    <DxFormLayoutItem Caption="Orden de Compra:" ColSpanXl="3" ColSpanMd="4" ColSpanXs="6">
        <Template>
            <div class="form-row">
                <div class="col">
                    <BuscadorOCompra EsSoloLectura="@OCSoloLectura" HabilitaBotonBusqueda="@HabilitaBotonOC"
                                     MostraBotonBusqueda="@MostrarBotorOC" MostrarSpin="false"
                                     CodigoDeposito="@SelectedDepositoOC?.CG_DEP" Remito="@Remito"
                                     Tipoo="selectedTire?.Tipoo"
                                     Valor="@OCompra" OnOCSeleccionada="onObjectSelected" />
                </div>
            </div>
        </Template>
    </DxFormLayoutItem>

    @*ABRIR O BUSCAR VALES*@
    <DxFormLayoutItem Caption="Numero de Vale:" ColSpanLg="4" ColSpanMd="3" ColSpanXs="6">
        <Template>
            <div class="form-row">
                <div class="col-10">
                    <DxSpinEdit @bind-Value="@NumVale"></DxSpinEdit>

                </div>
                <div class="col-2">
                    <DxButton RenderStyleMode="@ButtonRenderStyleMode.Outline" Enabled="@DisableCssClass"
                              Click="@(async (e)=> await AbrirVale())"
                              IconCssClass="fas fa-search" />
                    @*<button class="btn btn-outline-info btn-sm"
                                disabled="@DisableCssClass"
                                @onclick="AbrirVale">
                            ...
                        </button>*@

                </div>

            </div>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Fecha:" ColSpanLg="4" ColSpanMd="3" ColSpanXs="6">
        <Template>
            <div class="form-row">
                <div class="col-12">
                    <DxDateEdit @bind-Date="@Fecha" Format="dd/MM/yyyy"></DxDateEdit>
                </div>
            </div>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Pedido:" ColSpanLg="4" ColSpanMd="3" ColSpanXs="12">
        <Template>
            <BuscadorPedido Valor="@Pedido" MostrarSpin="false" EsSoloLectura="true"
                            HabilitaBotonBusqueda="false" MostraBotonBusqueda="false"
                            OnOCSeleccionada="onObjectSelected" />
        </Template>
    </DxFormLayoutItem>
    @*DEPOSITOS*@
    <DxFormLayoutItem Caption="Deposito de Salida:" ColSpanMd="6">
        <Template>
            <ComboDeposito DepositoSeleccionado="@selectedDepositoSalida" EsSoloLectura="@DepositoSalidaSoloLectura"
                           OnSelectedDepositoChanged="SelectedDepositoSalidaChanged" />
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Deposito de Ingreso:" ColSpanMd="6">
        <Template>
            <ComboDeposito DepositoSeleccionado="@selectedDepositoIngreso" EsSoloLectura="@DepositoIngresoSoloLectura"
                           OnSelectedDepositoChanged="SelectedDepositoIngresoChanged" />
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="@labelClienteProveedor" ColSpanXl="8" ColSpanMd="6" ColSpanSm="12">
        <Template>
            <div class="form-row">
                <div class="col-3 m-0">
                    <DxSpinEdit @bind-Value="@Cg_CLI_Cg_PROVE" ReadOnly="true" ShowSpinButtons="false"
                                ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto">
                    </DxSpinEdit>

                </div>
                <div class="col-9">
                    <DxTextBox @bind-Text="@DescripcionPro" CssClass="ml-1" ReadOnly="true" />

                </div>
                @*<div class="col-2">
                        <button class="btn btn-outline-secondary btn-sm">
                            Buscar
                        </button>

                    </div>*@
            </div>
        </Template>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Remito:" ColSpanLg="4" ColSpanMd="6" ColSpanSm="12">
        <Template>
            <div class="form-row">
                <div class="col">

                    <DxTextBox @bind-Text="@Remito" Id="remito"
                               ClearButtonDisplayMode="@DataEditorClearButtonDisplayMode.Auto">
                    </DxTextBox>

                </div>
            </div>

        </Template>
    </DxFormLayoutItem>
</DxFormLayout>

<CascadingValue Value="@StockGuardado">
    <div class="container-fluid">
        <GridEditStock DataSource="@ItemsVale" PermiteAgregar="@PermiteAgregarItem"
                       PermiteEditar="@PermiteEditarItem" PermiteEliminar="@PermiteEliminarItem"
                       onGuardar="onGuardarPedido" />
    </div>
</CascadingValue>
<BuscadorEmergente Titulo=@tituloBuscador Visible="@PopupBuscadorVisible" DataSource="@ItemsABuscar"
                   Columnas="@ColumnasBuscador" onObjetoSeleccionado="onObjectSelected" />



@code {
    Stock StockGuardado = new Stock();
    bool DisableCssClass { get => selectedTire == null ? false : true; }
    int NumVale { get; set; }


    private bool DepositoSalidaSoloLectura = true;
    private bool DepositoIngresoSoloLectura = true;

    Producto[] Productos = null;
    Deposito[] Depositos = null;
    Stock[] ItemsVale = null;
    bool PermiteAgregarItem { get; set; } = false;
    bool PermiteEditarItem { get; set; } = false;
    bool PermiteEliminarItem { get; set; } = false;

    #region "PARA BUSCAR ORDENES DE COMPRAS"
    bool OCSoloLectura = true;
    bool HabilitaBotonOC = true;
    bool MostrarBotorOC = false;
    bool OFSoloLectura = true;
    bool HabilitaBotonOF = false;
    #endregion

    string labelClienteProveedor = "Cliente/Proveedor";

    Producto selectedProducto;
    public Producto SelectedProducto
    {
        get { return selectedProducto; }
        set
        {
            selectedProducto = value;
            InvokeAsync(StateHasChanged);
        }
    }






    #region "CABACERA VALE"
    private Tire selectedTire = null;
    Tire SelectedTire
    {
        get => selectedTire;
        set { selectedTire = value; InvokeAsync(StateHasChanged); }
    }

    private int OrdenFabricacion { get; set; } = 0;
    private int Pedido { get; set; } = 0;
    private int? Cg_CLI_Cg_PROVE { get; set; } = 0;
    private int OCompra { get; set; } = 0;
    private string Remito = "0000-00000000";
    private DateTime fecha = DateTime.Now;
    DateTime Fecha { get => fecha; set { fecha = value; InvokeAsync(StateHasChanged); } }
    string Codigoi { get; set; } = "";
    string DescripcionPro { get; set; } = "";

    private Deposito selectedDepositoOC = null;
    Deposito SelectedDepositoOC
    {
        get => selectedDepositoOC;
        set { selectedDepositoOC = value; InvokeAsync(StateHasChanged); }
    }

    private Deposito selectedDepositoSalida = null;
    Deposito SelectedDepositoSalida
    {
        get => selectedDepositoSalida;
        set { selectedDepositoSalida = value; InvokeAsync(StateHasChanged); }
    }

    private Deposito selectedDepositoIngreso = null;
    Deposito SelectedDepositoIngreso
    {
        get => selectedDepositoIngreso;
        set { selectedDepositoIngreso = value; InvokeAsync(StateHasChanged); }
    }

    #endregion

    void OnChanged() { InvokeAsync(StateHasChanged); }

    protected override async Task OnInitializedAsync()
    {
        NumVale = await Http.GetFromJsonAsync<int>($"api/Stock/GetMaxVale");
        Depositos = await Http.GetFromJsonAsync<Deposito[]>("api/Depositos");
        selectedDepositoSalida = Depositos.FirstOrDefault(d => d.CG_DEP == 0);
        selectedDepositoIngreso = Depositos.FirstOrDefault(d => d.CG_DEP == 0);
        await InvokeAsync(StateHasChanged);
        ItemsVale = new List<Stock>().ToArray();
    }

    void SelectedTireChanged(Tire tire)
    {
        selectedTire = tire;
        //Dependiendo el TIPOO Habilitar controles


        StockGuardado.TIPOO = selectedTire.Tipoo;
        MostrarBotorOC = false;
        HabilitaBotonOC = false;
        OCSoloLectura = true;
        HabilitaBotonOF = false;
        OFSoloLectura = true;
        DepositoSalidaSoloLectura = true;
        DepositoIngresoSoloLectura = true;
        SelectedDepositoOC = new Deposito();

        if (selectedTire?.Tipoo == 5) //recep prove
        {
            HabilitaBotonOC = true;
            MostrarBotorOC = true;
            DepositoIngresoSoloLectura = false;
            labelClienteProveedor = "Proveedor:";
        }

        if (selectedTire?.Tipoo == 6)//dev prove
        {
            HabilitaBotonOC = true;
            MostrarBotorOC = true;
            DepositoSalidaSoloLectura = false;
            labelClienteProveedor = "Proveedor:";
        }

        if (selectedTire?.Tipoo == 10)
        {
            HabilitaBotonOF = true;
        }

        if (selectedTire?.Tipoo == 9)
        {
            DepositoIngresoSoloLectura = false;
            if (selectedDepositoIngreso?.CG_DEP == null || selectedDepositoIngreso?.CG_DEP == 0)
            {
                toastService.ShowToast("Seleccionar Deposito de Ingreso", TipoAlerta.Info);
                return;
            }

            PermiteAgregarItem = true;
        }

        if (selectedTire?.Tipoo == 21)
        {
            PermiteAgregarItem = true;
        }

        StockGuardado.TIPOO = selectedTire?.Tipoo; // lo utilizo para pasar la variable a los items de la grilla.
        InvokeAsync(StateHasChanged);
    }

    void SelectedDepositoSalidaChanged(Deposito deposito)
    {
        selectedDepositoSalida = deposito;

        if (selectedTire?.Tipoo == 6) //DEVOL prove
        {
            selectedDepositoOC = deposito;
        }
    }
    void SelectedDepositoIngresoChanged(Deposito deposito)
    {
        selectedDepositoIngreso = deposito;
        if (selectedTire?.Tipoo == 5) //RECEP prove
        {
            selectedDepositoOC = deposito;
        }

        if (selectedTire?.Tipoo == 9) //MOVIM ENTRE DEP
        {
            PermiteAgregarItem = true;
            ItemsVale = new List<Stock>().ToArray();
        }
    }

    async Task CargarVale()
    {
        //Cargando Datos de Cabecera
        NumVale = (int)ItemsVale[0].VALE;
        Fecha = ItemsVale[0].FE_MOV;
        //depos: ver cual campo es ingreso y salida: tal vez depende segun el tipo de operacion
        selectedDepositoIngreso = Depositos.Where(d => d.CG_DEP == ItemsVale[0].CG_DEP).FirstOrDefault();
        OrdenFabricacion = (int)ItemsVale[0].CG_ORDF;
        OCompra = (int)ItemsVale[0].OCOMPRA;
        Pedido = (int)ItemsVale[0].PEDIDO;
        Cg_CLI_Cg_PROVE = ItemsVale[0].CG_CLI == 0 ? ItemsVale[0].CG_PROVE : ItemsVale[0].CG_CLI;
        DescripcionPro = ItemsVale[0].CG_CLI == 0 ? "Proveedor" : "Cliente";
        Remito = ItemsVale[0].REMITO;
        PermiteAgregarItem = false;
        PermiteEditarItem = true;
        PermiteEliminarItem = true;

        //Cargando datos para controlar si exige lote etc: para controlar validaciones en la edicion.

        await ItemsVale.ToList().ForEachAsync(async i =>
        {
            var cg_prod = i.CG_ART;
            var prod = await Http.GetFromJsonAsync<Producto>($"api/Productos/GetProductoByCodigo/{cg_prod}");
            i.EXIGEDESPACHO = prod.EXIGEDESPACHO;
            i.EXIGELOTE = prod.EXIGELOTE;
            i.EXIGESERIE = prod.EXIGESERIE;
        });


        await InvokeAsync(StateHasChanged);
    }

    #region "BUSCADOR EMERGENTE"
    string tituloBuscador { get; set; } = "";
    private bool popupVisible = false;
    bool PopupVisible { get => popupVisible; set { popupVisible = value; InvokeAsync(StateHasChanged); } }

    private async Task onGuardarPedido(Stock stock)
    {
        //stock.NUMOCI = 0;
        stock.FE_MOV = Fecha;
        stock.VALE = NumVale;

        //stock.CG_CLI = 0;
        stock.CG_PROVE = Cg_CLI_Cg_PROVE;


        stock.TIPOO = selectedTire.Tipoo;
        //TODO: controlar el TIPOO al guardar para setar cada campo
        if (stock.TIPOO == 5)
        {
            stock.AVISO = "RECEPCION DE INSUMOS DE PROVEEDOR"; /*VERIFICAR TIPOO*/
            stock.OCOMPRA = OCompra;
            stock.DES_PROVE = DescripcionPro.Trim();
            stock.REMITO = Remito;
            stock.CG_DEP = SelectedDepositoIngreso.CG_DEP;
        }

        if (stock.TIPOO == 6)
        {
            stock.OCOMPRA = OCompra;
            stock.DES_PROVE = DescripcionPro.Trim();
            @*stock.CG_DEP = SelectedDepositoSalida.CG_DEP;*@
            stock.STOCK = -stock.STOCK;
        }

        if (stock.TIPOO == 9)//movim depos
        {
            stock.CG_DEP_ALT = (int)selectedDepositoIngreso.CG_DEP;
        }

        stock.ENTRREAL = DateTime.UtcNow;

        HttpResponseMessage response = null;
        if (stock.REGISTRO == null || stock.REGISTRO <= 0)
        {
            response = await Http.PostAsJsonAsync("api/Stock", stock);

        }
        else
        {
            var registro = stock.REGISTRO;
            response = await Http.PutAsJsonAsync($"api/Stock/PutStock/{registro}", stock);
        }



        if (response.StatusCode == System.Net.HttpStatusCode.BadRequest
            || response.StatusCode == System.Net.HttpStatusCode.NotFound
            || response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            var mensServidor = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Error: {mensServidor}");
            toastService.ShowToast($"{mensServidor}", TipoAlerta.Error);
        }
        else
        {
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                //
                StockGuardado = await response.Content.ReadFromJsonAsync<Stock>();
                await InvokeAsync(StateHasChanged);
                var itemsJson = JsonSerializer.Serialize(StockGuardado);
                Console.WriteLine(itemsJson);
                toastService.ShowToast($"Registrado Correctemente.Vale {StockGuardado.VALE}", TipoAlerta.Success);
            }



        }

    }

    private async Task onObjectSelected(object obj)
    {
        //ItemsVale = null;
        PopupBuscadorVisible = false;
        List<Stock> lStock = new List<Stock>();
        var tipoEntidad = obj.GetType().Name;
        if (tipoEntidad == "Compra")
        {
            var compra = (Compra)obj;
            OCompra = (int)compra.NUMERO;
            decimal registronegativo = 0;
            if (selectedTire.Tipoo == 5)
            {
                var ItemsCompras = await Http.GetFromJsonAsync<Compra[]>($"api/Compras/GetCompraByNumero/{compra.NUMERO}");

                //Cargar los item de compras en los items de items para guardar vale

                foreach (var item in ItemsCompras)
                {
                    registronegativo--;
                    Stock pedido = new Stock();
                    pedido.OCOMPRA = item.NUMERO;
                    OCompra = (int)item.NUMERO;
                    pedido.CG_PROVE = item.CG_PROVE;
                    Cg_CLI_Cg_PROVE = item.CG_PROVE;
                    DescripcionPro = item.DES_PROVE;
                    pedido.CG_ART = item.CG_MAT;
                    pedido.DES_ART = item.DES_MAT;
                    pedido.MONEDA = item.MONEDA;
                    pedido.UNID = item.UNID;
                    //pedido.CG_ORDEN = item.CG_ORE
                    //Calcular stockA
                    pedido.STOCKA = item.AUTORIZADO;
                    pedido.STOCK = item.AUTORIZADO * item.CG_DEN;
                    pedido.IMPORTE1 = item.PRECIONETO * item.CG_DEN;


                    //datos del producto: exigeserie etc.
                    var prod = await Http.GetFromJsonAsync<Producto>($"api/Productos/GetProductoByCodigo/{item.CG_MAT}");

                    pedido.EXIGEDESPACHO = prod.EXIGEDESPACHO;
                    pedido.EXIGESERIE = prod.EXIGESERIE;
                    pedido.EXIGELOTE = prod.EXIGELOTE;

                    pedido.REGISTRO = registronegativo;


                    lStock.Add(pedido);
                    ItemsVale = lStock.ToArray();
                }
            }

            if (selectedTire.Tipoo == 6)
            {
                //Devuelve con los items con su respectivo stock
                ItemsVale = await Http.GetFromJsonAsync<Stock[]>($"api/Stock/AbriValeByOCParaDevol/{compra.NUMERO}");

                registronegativo = 0;
                await ItemsVale.ForEachAsync(async stock =>
                {
                    registronegativo--;
                    stock.REGISTRO = registronegativo;
                    stock.STOCK = Math.Abs((decimal)stock.STOCK);
                    await InvokeAsync(StateHasChanged);
                });
            }



            PermiteAgregarItem = selectedTire.Tipoo == 5;
            PermiteEditarItem = true;
            PermiteEliminarItem = true;
        }
        if (tipoEntidad == "Stock")
        {
            var pedido = (Stock)obj;
            //Get items del vale
            var vale = pedido.VALE;
            ItemsVale = await Http.GetFromJsonAsync<Stock[]>($"api/Stock/AbriVale/{pedido.VALE}");

            if (ItemsVale != null || ItemsVale.Length > 0)
            {
                await CargarVale();
            }

        }
        if (tipoEntidad == "Programa")
        {
            var programa = (Programa)obj;
            var ItemsPrograma = await Http.GetFromJsonAsync<Programa[]>($"api/Programas/GetProgramaByOF/{programa.CG_ORDF}");
            //Cargar los item de compras en los items de items para guardar vale
            foreach (var item in ItemsPrograma)
            {
                Stock pedido = new Stock();
                pedido.PEDIDO = item.PEDIDO;
                pedido.CG_ORDF = item.CG_ORDF;
                OrdenFabricacion = (int)item.CG_ORDF;
                //OCompra = (int)item.NUMERO;
                pedido.CG_PROVE = 0;
                Cg_CLI_Cg_PROVE = item.CG_CLI;
                //DescripcionPro = item.des;
                pedido.CG_ART = item.CG_PROD;
                pedido.DES_ART = item.DES_PROD;
                //pedido.UNID = item.un;
                //pedido.IMPORTE1 = item.PRECIO;

                lStock.Add(pedido);
            }

            ItemsVale = lStock.ToArray();
            PermiteAgregarItem = false;
            PermiteEditarItem = true;
            PermiteEliminarItem = true;
        }
        if (tipoEntidad == "Producto")
        {
            selectedProducto = (Producto)obj;
            Codigoi = selectedProducto.CG_PROD;
            DescripcionPro = selectedProducto.DES_PROD;
        }
    }

    #endregion

    #region "BUSCAR VALES"

    private bool popupBuscadorVisible = false;
    bool PopupBuscadorVisible { get => popupBuscadorVisible; set { popupBuscadorVisible = value; InvokeAsync(StateHasChanged); } }
    string[] ColumnasBuscador = null; /*{ "VALE", "FE_MOV", "CG_ART", "DES_ART", "DESPACHO", "LOTE", "SERIE" };*/
    object[] ItemsABuscar;

    protected async Task AbrirVale()
    {

        var vale = NumVale;
        ItemsVale = await Http.GetFromJsonAsync<Stock[]>($"api/Stock/AbriVale/{vale}");

        if (ItemsVale == null || ItemsVale.Length == 0)
        {
            await BuscarVales();
        }
        else
        {
            await CargarVale();
        }
    }

    protected async Task BuscarVales()
    {
        ItemsABuscar = null;
        PopupBuscadorVisible = true;
        tituloBuscador = $"Listado de Vales";
        ColumnasBuscador = new string[] { "VALE", "FE_MOV", "CG_ART", "DES_ART" };
        var tipoo = SelectedTire.Tipoo;
        ItemsABuscar = await Http.GetFromJsonAsync<Stock[]>($"api/Stock/GetValesByTipo/{tipoo}");
        if (ItemsABuscar == null)
        {
            ItemsABuscar = new List<Stock>().ToArray();
        }
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region "BUSCAR CLIENTE"
    protected async Task BuscarProductos()
    {
        ItemsABuscar = null;
        tituloBuscador = "Listado de Clientes";
        ColumnasBuscador = new string[] { "CG_CLI", "DES_CLI" };
        ItemsABuscar = await Http.GetFromJsonAsync<Producto[]>("api/Clientes");
        PopupBuscadorVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    #endregion




}
